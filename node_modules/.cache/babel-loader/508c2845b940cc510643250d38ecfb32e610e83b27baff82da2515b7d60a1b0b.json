{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : process.env.REACT_APP_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'ngrok-skip-browser-warning': 'true'\n  },\n  withCredentials: false\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  const uid = localStorage.getItem('uid');\n  if (uid && !config.url.includes('uid=')) {\n    const separator = config.url.includes('?') ? '&' : '?';\n    config.url = `${config.url}${separator}uid=${uid}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 응답 인터셉터\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 토큰 갱신 로직\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await api.post('/refresh_token', {\n          refresh_token: refreshToken\n        });\n        localStorage.setItem('token', response.data.token);\n        error.config.headers['Authorization'] = `Bearer ${response.data.token}`;\n        return api(error.config);\n      }\n    } catch (refreshError) {\n      localStorage.clear();\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// 인증 관련 API\nexport const login = async (email, password) => {\n  const response = await api.post('/login', {\n    email,\n    password\n  });\n  return response.data;\n};\nexport const signup = async (email, password, name) => {\n  const response = await api.post('/signup', {\n    email,\n    password,\n    name\n  });\n  return response.data;\n};\n\n// 상품 검색 및 수집 API\nexport const searchProducts = async keyword => {\n  const uid = localStorage.getItem('uid');\n  const response = await api.post('/search', {\n    keyword,\n    uid\n  });\n  return response.data;\n};\nexport const collectProducts = async (uid, selected_items) => {\n  const response = await api.post('/collect', {\n    uid,\n    selected_items\n  });\n  return response.data;\n};\nexport const getCollectedProducts = async () => {\n  const uid = localStorage.getItem('uid');\n  const response = await api.get(`/get_collected_products?uid=${uid}`);\n  return response.data;\n};\n\n// 타오바오 매칭 API\nexport const matchTaobaoProduct = async imageUrl => {\n  const response = await api.post('/taobao_match', {\n    image_url: imageUrl\n  });\n  return response.data;\n};\nexport const batchTaobaoMatch = async productIds => {\n  const uid = localStorage.getItem('uid');\n  const response = await api.post('/batch_taobao_match', {\n    uid,\n    productIds\n  });\n  return response.data;\n};\n\n// 헤이셀러 관련 API\nexport const downloadHeySeller = async selectedProducts => {\n  const uid = localStorage.getItem('uid');\n  const response = await api.get(`/download_heyseller?uid=${uid}`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};\nexport const generateSEO = async productId => {\n  const uid = localStorage.getItem('uid');\n  const response = await api.post('/generate_seo', {\n    uid,\n    product_id: productId\n  });\n  return response.data;\n};\n\n// 마켓 관리 API\nexport const getMarketDB = async uid => {\n  const response = await api.get(`/get_market_db?uid=${uid}`);\n  return response.data;\n};\nexport const addMarket = async (uid, marketData) => {\n  const response = await api.post('/add_market', {\n    uid,\n    marketData\n  });\n  return response.data;\n};\nexport const updateMarket = async (uid, marketId, marketData) => {\n  const response = await api.put('/update_market', {\n    uid,\n    marketId,\n    marketData\n  });\n  return response.data;\n};\nexport const deleteMarket = async (uid, marketId) => {\n  const response = await api.delete('/delete_market', {\n    data: {\n      uid,\n      marketId\n    }\n  });\n  return response.data;\n};\nexport const reverseMarket = async (uid, marketId) => {\n  const response = await api.post('/market_reversing', {\n    uid,\n    marketId\n  });\n  return response.data;\n};\n\n// 기본 API 인스턴스 export\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","REACT_APP_API_URL","headers","withCredentials","interceptors","request","use","config","uid","localStorage","getItem","url","includes","separator","error","Promise","reject","response","_error$response","status","refreshToken","post","refresh_token","setItem","data","token","refreshError","clear","window","location","href","login","email","password","signup","name","searchProducts","keyword","collectProducts","selected_items","getCollectedProducts","get","matchTaobaoProduct","imageUrl","image_url","batchTaobaoMatch","productIds","downloadHeySeller","selectedProducts","responseType","generateSEO","productId","product_id","getMarketDB","addMarket","marketData","updateMarket","marketId","put","deleteMarket","delete","reverseMarket"],"sources":["C:/자동ai/front/my-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: process.env.NODE_ENV === 'development' ? '/api' : process.env.REACT_APP_API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        'ngrok-skip-browser-warning': 'true'\n    },\n    withCredentials: false\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(\n    (config) => {\n        const uid = localStorage.getItem('uid');\n        if (uid && !config.url.includes('uid=')) {\n            const separator = config.url.includes('?') ? '&' : '?';\n            config.url = `${config.url}${separator}uid=${uid}`;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\n// 응답 인터셉터\napi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        if (error.response?.status === 401) {\n            // 토큰 갱신 로직\n            try {\n                const refreshToken = localStorage.getItem('refreshToken');\n                if (refreshToken) {\n                    const response = await api.post('/refresh_token', { refresh_token: refreshToken });\n                    localStorage.setItem('token', response.data.token);\n                    error.config.headers['Authorization'] = `Bearer ${response.data.token}`;\n                    return api(error.config);\n                }\n            } catch (refreshError) {\n                localStorage.clear();\n                window.location.href = '/login';\n            }\n        }\n        return Promise.reject(error);\n    }\n);\n\n// 인증 관련 API\nexport const login = async (email, password) => {\n    const response = await api.post('/login', { email, password });\n    return response.data;\n};\n\nexport const signup = async (email, password, name) => {\n    const response = await api.post('/signup', { email, password, name });\n    return response.data;\n};\n\n// 상품 검색 및 수집 API\nexport const searchProducts = async (keyword) => {\n    const uid = localStorage.getItem('uid');\n    const response = await api.post('/search', { keyword, uid });\n    return response.data;\n};\n\nexport const collectProducts = async (uid, selected_items) => {\n    const response = await api.post('/collect', { uid, selected_items });\n    return response.data;\n};\n\nexport const getCollectedProducts = async () => {\n    const uid = localStorage.getItem('uid');\n    const response = await api.get(`/get_collected_products?uid=${uid}`);\n    return response.data;\n};\n\n// 타오바오 매칭 API\nexport const matchTaobaoProduct = async (imageUrl) => {\n    const response = await api.post('/taobao_match', { image_url: imageUrl });\n    return response.data;\n};\n\nexport const batchTaobaoMatch = async (productIds) => {\n    const uid = localStorage.getItem('uid');\n    const response = await api.post('/batch_taobao_match', { uid, productIds });\n    return response.data;\n};\n\n// 헤이셀러 관련 API\nexport const downloadHeySeller = async (selectedProducts) => {\n    const uid = localStorage.getItem('uid');\n    const response = await api.get(`/download_heyseller?uid=${uid}`, {\n        responseType: 'blob'\n    });\n    return response.data;\n};\n\nexport const generateSEO = async (productId) => {\n    const uid = localStorage.getItem('uid');\n    const response = await api.post('/generate_seo', { uid, product_id: productId });\n    return response.data;\n};\n\n// 마켓 관리 API\nexport const getMarketDB = async (uid) => {\n    const response = await api.get(`/get_market_db?uid=${uid}`);\n    return response.data;\n};\n\nexport const addMarket = async (uid, marketData) => {\n    const response = await api.post('/add_market', { uid, marketData });\n    return response.data;\n};\n\nexport const updateMarket = async (uid, marketId, marketData) => {\n    const response = await api.put('/update_market', { uid, marketId, marketData });\n    return response.data;\n};\n\nexport const deleteMarket = async (uid, marketId) => {\n    const response = await api.delete('/delete_market', { data: { uid, marketId } });\n    return response.data;\n};\n\nexport const reverseMarket = async (uid, marketId) => {\n    const response = await api.post('/market_reversing', { uid, marketId });\n    return response.data;\n};\n\n// 기본 API 인스턴스 export\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}