{"ast":null,"code":"import axios from 'axios';\n\n// 고정 ngrok URL 사용\nconst API_BASE_URL = 'https://moray-leading-jolly.ngrok-free.app';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// 요청 인터셉터에서 토큰 자동 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  const uid = localStorage.getItem('uid');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  if (uid) {\n    // URL에 uid가 없는 경우에만 추가\n    if (!config.url.includes('uid=')) {\n      config.url += (config.url.includes('?') ? '&' : '?') + `uid=${uid}`;\n    }\n  }\n  config.withCredentials = false;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 응답 인터셉터에서 토큰 만료 처리\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // 토큰 만료 에러인 경우\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // 토큰 갱신 요청\n      const response = await api.post('/refresh_token', {\n        uid: localStorage.getItem('uid')\n      });\n      const {\n        token\n      } = response.data;\n      localStorage.setItem('token', token);\n\n      // 원래 요청 재시도\n      originalRequest.headers['Authorization'] = `Bearer ${token}`;\n      return api(originalRequest);\n    } catch (refreshError) {\n      // 토큰 갱신 실패 시 로그인 페이지로 이동\n      localStorage.clear();\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// 요청 인터셉터\napi.interceptors.request.use(config => {\n  config.withCredentials = false;\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 기본 API 함수들\nexport const signup = async (email, password, name) => {\n  try {\n    console.log('Sending signup request to:', API_BASE_URL + '/signup');\n    console.log('Request data:', {\n      email,\n      name\n    });\n    const response = await api.post('/signup', {\n      email,\n      password,\n      name\n    });\n    console.log('Signup response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response4;\n    console.error('Signup error:', {\n      message: error.message,\n      response: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      headers: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.headers\n    });\n    throw error;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await api.post('/login', {\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error.response || error);\n    throw error;\n  }\n};\nexport const getUserInfo = async () => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.get(`/user-info?uid=${uid}`);\n    return response.data;\n  } catch (error) {\n    console.error('Get user info error:', error.response || error);\n    throw error;\n  }\n};\n\n// 검색 및 수집 관련 API\nexport const searchProducts = async (keyword, uid) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/search`, {\n      keyword,\n      uid\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    console.error('API Error:', error);\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error;\n  }\n};\nexport const collectProducts = async selectedProductIds => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.post('/collect', {\n      uid,\n      selected_product_ids: selectedProductIds\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Collect products error:', error.response || error);\n    throw error;\n  }\n};\n\n// 수집된 상품 관련 API\nexport const getCollectedProducts = async () => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.get(`/get_collected_products?uid=${uid}`);\n    return response.data;\n  } catch (error) {\n    console.error('Get collected products error:', error.response || error);\n    throw error;\n  }\n};\n\n// 타오바오 관련 API\nexport const matchTaobaoProduct = async imageUrl => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.post('/taobao_match', {\n      image_url: imageUrl,\n      uid\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Taobao match error:', error.response || error);\n    throw error;\n  }\n};\nexport const batchTaobaoMatch = async productIds => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.post('/batch_taobao_match', {\n      uid,\n      productIds\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Batch taobao match error:', error.response || error);\n    throw error;\n  }\n};\n\n// 헤이셀러 관련 API\nexport const downloadHeySeller = async () => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.get(`/download_heyseller?uid=${uid}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Download heyseller error:', error.response || error);\n    throw error;\n  }\n};\n\n// SEO 관련 API\nexport const generateSEO = async productId => {\n  const uid = localStorage.getItem('uid');\n  try {\n    const response = await api.post('/generate_seo', {\n      uid,\n      product_id: productId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Generate SEO error:', error.response || error);\n    throw error;\n  }\n};\n\n// 마켓 DB 조회\nexport const getMarketDB = async uid => {\n  try {\n    const response = await api.get(`/get_market_db?uid=${uid}`);\n    return response.data;\n  } catch (error) {\n    console.error('Get market DB error:', error.response || error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","uid","url","includes","withCredentials","error","Promise","reject","response","_error$response","originalRequest","status","_retry","post","data","setItem","refreshError","clear","window","location","href","signup","email","password","name","console","log","_error$response2","_error$response3","_error$response4","message","login","getUserInfo","get","searchProducts","keyword","_error$response5","collectProducts","selectedProductIds","selected_product_ids","getCollectedProducts","matchTaobaoProduct","imageUrl","image_url","batchTaobaoMatch","productIds","downloadHeySeller","responseType","generateSEO","productId","product_id","getMarketDB"],"sources":["C:/자동ai/front/my-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 고정 ngrok URL 사용\nconst API_BASE_URL = 'https://moray-leading-jolly.ngrok-free.app';\n\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n});\n\n// 요청 인터셉터에서 토큰 자동 추가\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        const uid = localStorage.getItem('uid');\n        \n        if (token) {\n            config.headers['Authorization'] = `Bearer ${token}`;\n        }\n        if (uid) {\n            // URL에 uid가 없는 경우에만 추가\n            if (!config.url.includes('uid=')) {\n                config.url += (config.url.includes('?') ? '&' : '?') + `uid=${uid}`;\n            }\n        }\n        \n        config.withCredentials = false;\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// 응답 인터셉터에서 토큰 만료 처리\napi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n        \n        // 토큰 만료 에러인 경우\n        if (error.response?.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n            \n            try {\n                // 토큰 갱신 요청\n                const response = await api.post('/refresh_token', {\n                    uid: localStorage.getItem('uid')\n                });\n                \n                const { token } = response.data;\n                localStorage.setItem('token', token);\n                \n                // 원래 요청 재시도\n                originalRequest.headers['Authorization'] = `Bearer ${token}`;\n                return api(originalRequest);\n            } catch (refreshError) {\n                // 토큰 갱신 실패 시 로그인 페이지로 이동\n                localStorage.clear();\n                window.location.href = '/login';\n                return Promise.reject(refreshError);\n            }\n        }\n        \n        return Promise.reject(error);\n    }\n);\n\n// 요청 인터셉터\napi.interceptors.request.use(\n    (config) => {\n        config.withCredentials = false;\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// 기본 API 함수들\nexport const signup = async (email, password, name) => {\n    try {\n        console.log('Sending signup request to:', API_BASE_URL + '/signup');\n        console.log('Request data:', { email, name });\n        \n        const response = await api.post('/signup', {\n            email,\n            password,\n            name\n        });\n        \n        console.log('Signup response:', response.data);\n        return response.data;\n    } catch (error) {\n        console.error('Signup error:', {\n            message: error.message,\n            response: error.response?.data,\n            status: error.response?.status,\n            headers: error.response?.headers\n        });\n        throw error;\n    }\n};\n\nexport const login = async (email, password) => {\n    try {\n        const response = await api.post('/login', { email, password });\n        return response.data;\n    } catch (error) {\n        console.error('Login error:', error.response || error);\n        throw error;\n    }\n};\n\nexport const getUserInfo = async () => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.get(`/user-info?uid=${uid}`);\n        return response.data;\n    } catch (error) {\n        console.error('Get user info error:', error.response || error);\n        throw error;\n    }\n};\n\n// 검색 및 수집 관련 API\nexport const searchProducts = async (keyword, uid) => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/search`, {\n            keyword,\n            uid\n        });\n        return response.data;\n    } catch (error) {\n        console.error('API Error:', error);\n        throw error.response?.data || error;\n    }\n};\n\nexport const collectProducts = async (selectedProductIds) => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.post('/collect', {\n            uid,\n            selected_product_ids: selectedProductIds\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Collect products error:', error.response || error);\n        throw error;\n    }\n};\n\n// 수집된 상품 관련 API\nexport const getCollectedProducts = async () => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.get(`/get_collected_products?uid=${uid}`);\n        return response.data;\n    } catch (error) {\n        console.error('Get collected products error:', error.response || error);\n        throw error;\n    }\n};\n\n// 타오바오 관련 API\nexport const matchTaobaoProduct = async (imageUrl) => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.post('/taobao_match', { image_url: imageUrl, uid });\n        return response.data;\n    } catch (error) {\n        console.error('Taobao match error:', error.response || error);\n        throw error;\n    }\n};\n\nexport const batchTaobaoMatch = async (productIds) => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.post('/batch_taobao_match', { uid, productIds });\n        return response.data;\n    } catch (error) {\n        console.error('Batch taobao match error:', error.response || error);\n        throw error;\n    }\n};\n\n// 헤이셀러 관련 API\nexport const downloadHeySeller = async () => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.get(`/download_heyseller?uid=${uid}`, {\n            responseType: 'blob'\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Download heyseller error:', error.response || error);\n        throw error;\n    }\n};\n\n// SEO 관련 API\nexport const generateSEO = async (productId) => {\n    const uid = localStorage.getItem('uid');\n    try {\n        const response = await api.post('/generate_seo', { uid, product_id: productId });\n        return response.data;\n    } catch (error) {\n        console.error('Generate SEO error:', error.response || error);\n        throw error;\n    }\n};\n\n// 마켓 DB 조회\nexport const getMarketDB = async (uid) => {\n  try {\n    const response = await api.get(`/get_market_db?uid=${uid}`);\n    return response.data;\n  } catch (error) {\n    console.error('Get market DB error:', error.response || error);\n    throw error;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}